//wc: with comment 寫給助教跟自己看的

//Hw5-4-1 I-type testing 
//inst[31,20]  inst[19,15]  inst[14,12]  inst[11,7]  inst[6,0]
// imm[11,0]      rs1          funct3        rd        opcode

111111111111     00010          000        00001      0010011   // addi x1  x2 -1    , x1 = 1 ok
000000000010     00100          001        00011      0010011   // slli x3  x4  2    , x3 = 4 * (2^2) = 16 ok
//000000000111     00110          010        00100      0010011   // slti x5  x6  7    , x5 = 1 ok
//000000001001     01000          011        00111      0010011   // sltui x7  x8  9   , x7 = 1 ok
//000000000001     00000          100        01001      0010011   // xori x9  x0  1 , x9 =  1 ok
//000000000001     00100          101        01001      0010011   // srli x12  x4  1 , x12 = 2 ok
//000000000001     00100          101        01001      0010011   // srai x13  x8  2 , x13 = 2 ok
//000000000001     00000          110        01010      0010011   // ori x10  x0  1 , x10 = 1 ok
//000000000010     00000          111        01011      0010011   // andi x11  x0 2 , x11 = 0 ok

//Hw5-4-2 R-type testing
// inst[31,25]  inst[24,20]  inst[19,15]  inst[14,12]  inst[11,7]   inst[6,0]
//   funct7         rs2          rs1        funct3         rd        opcode
//  0000000        01011        01001        000         10010      0110011     // add  x18  x9   x11 , x18 = 20 ok
//  0100000        00111        10101        000         10100      0110011     // sub  x20  x21  x7 , x20 = 14 ok
//  0000000        00001        01000        001         01110      0110011     // sll  x22  x8   x1 , x22 = 16 ok
//  0000000        11001        11000        010         10111      0110011     // slt  x23  x24  x25 , x23 = 1 ok
//  0000000        00001        01001        011         01010      0110011     // sltu x10  x9   x1  , x10 = 0 ok
//  0000000        00010        00001        100         01011      0110011     // xor  x11  x1   x2 , x11 = 3 ok
//  0000000        00001        00010        101         01011      0110011     // srl  x11  x2   x1 , x11 = 1 ok
//  0100000        00001        00010        101         01011      0110011     // sra  x11  x2   x1 , x11 = 1 ok
//  0000000        00111        00101        110         01011      0110011     // or   x11  x5   x7 , x11 = 7 ok
//  0000000        00010        00000        111         01011      0110011     // and  x11  x0   x2 , x11 = 0 ok

// Hw5-4-6 Load/Store inst. testing
//inst[31,20]  inst[19,15]  inst[14,12]  inst[11,7]  inst[6,0]
// imm[11,0]      rs1          funct3        rd        opcode

//000000000000     00000          000        00001      0000011   // lb x1 x0 0 
//000000000010     00000          001        00001      0000011   // lh x1 x0 2 
//000000000000     00000          010        00001      0000011   // lw x1 x0 0
//000000000011     00000          100        00001      0000011   // lbu x1 x0 3
//000000000010     00000          101        00001      0000011   // lhu x1 x0 0

// inst[31,25]  inst[24,20]  inst[19,15]  inst[14,12]  inst[11,7]   inst[6,0]
//  imm[11,5]       rs2          rs1        funct3      imm[4,0]     opcode 
//  0000000        00001        00000        000         00000      0100011   // sb x1 x0 0 
//  0000000        00001        00000        001         00000      0100011   // sh x1 x0 0
//  0000000        00001        00000        010         00000      0100011   // sw x1 x0 0 

// Hw5-4-8 B-type testing
// inst[31]  inst[30,25]    inst[24,20]   inst[19,15]   inst[14,12]   inst[11,8]  inst[7]   inst[6,0]
// imm[12]    imm[10,5]         rs2          rs1          funct3       imm[4,1]   imm[11]    opcode
//   0         000000          00001        00001          000          0100        0        1100011   // beq x1 x1  8 ok
//   0         000000          00010        00001          001          1010        0        1100011   // bne x1 x2 20 ok
//   0         000000          00010        00001          100          1000        0        1100011   // blt x1 x2 16 ok
//   0         000000          00000        00001          101          0110        0        1100011   // bge x1 x0 12 ok
//   0         000000          00001        00000          110          0100        0        1100011   // bltu x0 x1 8 ok
//   0         000000          00001        00001          111          0110        0        1100011   // bgeu x1 x1 12 ok

// Hw5-4-9 J-type testing
// jal
// inst[31]  inst[30,21]    inst[20]   inst[19,12]   inst[11,7]     inst[6,0]
//  imm[20]   imm[10,1]      imm[11]    imm[19,12]       rd          opcode
//   0       0000000110         0        00000000       00001        1101111   // jal x1  12
//   0       0000000110         0        00000000       00001        1101111     // jal x1  12
// jalr
// inst[31,20]   inst[19,15]   inst[14,12]   inst[11,7]    inst[6,0]
//  imm[11,0]      rs1           funct3         rd          opcode
// 000000010000    00100           000          00001       1100111   // jalr x1 x4 16